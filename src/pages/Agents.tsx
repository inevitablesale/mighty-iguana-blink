import { useState, useEffect } from "react";
import { Header } from "@/components/Header";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { Bot, Sparkles } from "lucide-react";
import { AddAgentDialog } from "@/components/AddAgentDialog";
import { AgentCard } from "@/components/AgentCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardHeader, CardContent, CardFooter } from "@/components/ui/card";
import { Agent, PredictiveLead, Opportunity } from "@/types/index";
import { useNavigate } from "react-router-dom";
import { PredictiveLeads } from "@/components/PredictiveLeads";
import { Separator } from "@/components/ui/separator";

const Agents = () => {
  const [agents, setAgents] = useState<Agent[]>([]);
  const [loading, setLoading] = useState(true);
  const [runningAgentId, setRunningAgentId] = useState<string | null>(null);
  const [discoveredLeads, setDiscoveredLeads] = useState<PredictiveLead[]>([]);
  const [investigatingLead, setInvestigatingLead] = useState<PredictiveLead | null>(null);
  const [investigatedLeads, setInvestigatedLeads] = useState<string[]>([]);
  const navigate = useNavigate();

  const fetchAgents = async () => {
    setLoading(true);
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      setLoading(false);
      return;
    }

    const { data, error } = await supabase
      .from("agents")
      .select("id, name, prompt, last_run_at")
      .eq("user_id", user.id)
      .order("created_at", { ascending: false });

    if (error) {
      toast.error("Could not load your agents.");
    } else if (data) {
      setAgents(data);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchAgents();
  }, []);

  const handleDeleteAgent = async (agentId: string) => {
    const { error } = await supabase.from("agents").delete().eq("id", agentId);
    if (error) {
      toast.error("Failed to delete agent.");
    } else {
      toast.success("Agent deleted.");
      fetchAgents();
    }
  };

  const handleRunDiscovery = async (agentId: string) => {
    setRunningAgentId(agentId);
    setDiscoveredLeads([]);
    const toastId = toast.loading("Agent is searching for new leads...");

    try {
      const { data, error } = await supabase.functions.invoke('discover-leads-for-agent', {
        body: { agentId },
      });

      if (error) throw error;

      setDiscoveredLeads(data.leads || []);
      toast.success(`Agent found ${data.leads?.length || 0} new leads.`, { id: toastId });
      fetchAgents();
    } catch (e) {
      const err = e as Error;
      toast.error(`Discovery failed: ${err.message}`, { id: toastId });
    } finally {
      setRunningAgentId(null);
    }
  };

  const handleInvestigateLead = async (lead: PredictiveLead) => {
    setInvestigatingLead(lead);
    const toastId = toast.loading(`Investigating ${lead.companyName}...`);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("User not authenticated.");

      const { data, error } = await supabase.functions.invoke('convert-lead-to-opportunity', {
        body: { lead },
      });

      if (error) throw error;

      const newOpportunity: Opportunity = { ...data, id: '' }; // The id will be generated by db

      const { error: insertError } = await supabase.from('opportunities').insert({
        user_id: user.id,
        company_name: newOpportunity.companyName,
        role: newOpportunity.role,
        location: newOpportunity.location,
        potential: newOpportunity.potential,
        hiring_urgency: newOpportunity.hiringUrgency,
        match_score: newOpportunity.matchScore,
        key_signal: newOpportunity.keySignal,
      });

      if (insertError) throw insertError;

      setInvestigatedLeads(prev => [...prev, lead.companyName]);
      toast.success(`Opportunity created for ${lead.companyName}!`, {
        id: toastId,
        description: "You can view it on the Opportunities page.",
        action: {
          label: "View Opportunities",
          onClick: () => navigate('/opportunities'),
        },
      });

    } catch (e) {
      const err = e as Error;
      toast.error(`Investigation failed: ${err.message}`, { id: toastId });
    } finally {
      setInvestigatingLead(null);
    }
  };

  return (
    <div className="flex flex-col">
      <Header title="Agents" />
      <main className="flex flex-1 flex-col gap-6 p-4 lg:p-6">
        <div>
          <h2 className="text-2xl font-bold">Your Recruiting Agents</h2>
          <p className="text-muted-foreground">
            Deploy your specialized agents to proactively find and investigate new leads.
          </p>
        </div>
        
        {loading ? (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {[...Array(3)].map((_, i) => <Card key={i}><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-10 w-full" /></CardContent><CardFooter><Skeleton className="h-10 w-24" /></CardFooter></Card>)}
          </div>
        ) : agents.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {agents.map((agent) => (
              <AgentCard
                key={agent.id}
                agent={agent}
                onDelete={handleDeleteAgent}
                onRunDiscovery={handleRunDiscovery}
                isRunning={runningAgentId === agent.id}
              />
            ))}
          </div>
        ) : (
           <div className="flex flex-1 items-center justify-center rounded-lg border border-dashed shadow-sm py-12">
            <div className="flex flex-col items-center gap-2 text-center">
              <Bot className="h-12 w-12 text-primary" />
              <h3 className="text-xl font-bold tracking-tight">No Agents Yet</h3>
              <p className="text-sm text-muted-foreground">Click "New Agent" to create your first automated search agent.</p>
              <AddAgentDialog onAgentCreated={fetchAgents} />
            </div>
          </div>
        )}

        {discoveredLeads.length > 0 && (
          <>
            <Separator />
            <PredictiveLeads
              leads={discoveredLeads}
              onInvestigate={handleInvestigateLead}
              investigatingLead={investigatingLead}
              investigatedLeads={investigatedLeads}
            />
          </>
        )}
      </main>
    </div>
  );
};

export default Agents;